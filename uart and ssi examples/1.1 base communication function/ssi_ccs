#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/sysctl.h"
#include "driverlib/ssi.h"
#include "driverlib/gpio.h"
#include "driverlib/pin_map.h"
#include "utils/softssi.h"

#include "inc/hw_ints.h"
#include "driverlib/uart.h"
#include "utils/uartstdio.h"


#define NUM_SSI_DATA     3

void InitConsole(void){
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
	GPIOPinConfigure(GPIO_PA0_U0RX);
	GPIOPinConfigure(GPIO_PA1_U0TX);
	UARTClockSourceSet(UART0_BASE, UART_CLOCK_PIOSC);
	GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);
	UARTStdioConfig(0,9600,16000000);
	//  UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(),9600,(UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE | UART_CONFIG_PAR_NONE));
}
int main(void)
{
	uint32_t DataTx[NUM_SSI_DATA];
	uint32_t DataRx[NUM_SSI_DATA];
	uint32_t Index = 0;
    SysCtlClockSet(SYSCTL_SYSDIV_1 | SYSCTL_USE_OSC | SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ);//系统时钟
    InitConsole();
    SysCtlPeripheralEnable(SYSCTL_PERIPH_SSI0);//使能SSI外设
    //SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);//使能GPIO外设，进而使用引脚
    GPIOPinConfigure(GPIO_PA2_SSI0CLK);
    GPIOPinConfigure(GPIO_PA3_SSI0FSS);
    GPIOPinConfigure(GPIO_PA5_SSI0TX);
    GPIOPinConfigure(GPIO_PA4_SSI0RX);// 每个接口设置对应功能
    //SysCtlGPIOAHBEnable(GPIO_PORTA_BASE);//挂高速线
    GPIOPinTypeSSI(GPIO_PORTA_BASE, GPIO_PIN_5 | GPIO_PIN_4 | GPIO_PIN_3 |
    GPIO_PIN_2);//配置SSI功能GPIO引脚
    SSIConfigSetExpClk(SSI0_BASE, SysCtlClockGet(), SSI_FRF_MOTO_MODE_0, SSI_MODE_MASTER,1000000,16);
     SSIEnable(SSI0_BASE);//使能SSI该PORT
    while(SSIDataGetNonBlocking(SSI0_BASE, &DataRx[0]))
        {
        }

    DataTx[0]= 1111;
    DataTx[1]= 2222;
    DataTx[2]= 3333;
    UARTprintf("\n Send\n");
    for(Index = 0; Index < NUM_SSI_DATA; Index++)
        {
    		UARTprintf("%x\n",DataTx[Index]);
        	SSIDataPut(SSI0_BASE, DataTx[Index]);//transmitting
        }
    while(SSIBusy(SSI0_BASE))
        {
        }//等处理完
    UARTprintf("\n Receive \n");
        for(Index = 0; Index < NUM_SSI_DATA; Index++)
        {
        	SSIDataGet(SSI0_BASE, &(DataRx[Index]));//receiving
        	UARTprintf("%x\n",DataRx[Index]);

        }
        return(0);
}
